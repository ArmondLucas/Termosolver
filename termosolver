import sqlite3
import numpy
import matplotlib.pyplot as plt 
import math
from matplotlib import style
from numpy import log as ln
import numpy as np
from scipy.optimize import fsolve
import autograd.numpy as anp
style.use ('fivethirtyeight')

conn = sqlite3.connect('banco_de_dados_termo.db')
c = conn.cursor()

def lista_de_moleculas():
        c.execute('SELECT molecula FROM stuffToPlot WHERE A > 0 AND Zc > 0')
        for row in c.fetchall():
            print('; '.join(row))

def inputmolec():
    print('')
    print('Qual a mistura de compostos que você quer?')
    print('Digite a primeira, aperte o enter, então repita para a segunda. Digite help para uma lista com as moleculas')
    molecula1 = input()
    if molecula1 == 'help':
        print('As moléculas compreendidas nesse software, com dados do apêndicie B do Van Ness, são:')
        lista_de_moleculas()
        print('')
        print('Qual a mistura de compostos que você quer montar a curva de equilibrio liq/vap?')
        print('Digite a primeira, aperte o enter, então repita para a segunda.')
        molecula1 = input()
        molecula2 = input()
    else:
        molecula2 = input()
    return molecula1,molecula2
        
R = 83.1447

def eos(EdE,T):
        if EdE == '1':
            Ψ = 27/64
            α1 = 1
            α2 = 1
            Ω = 1/8
            ε = 0
            σ = 0
        if EdE == '2':
            Ψ = 0.42748
            α1 = ((T/Tc1)**(-1/2))
            α2 = ((T/Tc2)**(-1/2))
            Ω = 0.08664
            ε = 0
            σ = 1
        if EdE == '3':
            Ψ = 0.42748
            α1 = (1+(0.480+(1.574*ω1)-(0.176*(ω1**2)))*(1-((T/(Tc1))**(1/2))))**2
            α2 = (1+(0.480+(1.574*ω2)-(0.176*(ω2**2)))*(1-((T/(Tc2))**(1/2))))**2
            Ω = 0.08664
            ε = 0
            σ = 1
        if EdE == '4':
            Ψ = 0.45724
            α1 = (1+(0.37464+(1.54226*ω1)-0.26992*(ω1**2))*(1-((T/Tc1)**(1/2))))**2
            α2 = (1+(0.37464+(1.54226*ω2)-0.26992*(ω2**2))*(1-((T/Tc2)**(1/2))))**2
            Ω = 0.07780
            ε = 1-2**(1/2)
            σ = 1+2**(1/2)
        a_eos1 = (Ψ*α1*((R*Tc1)**2))/Pc1
        b_eos1 = (Ω*R*(Tc1))/(Pc1)
        a_eos2 = (Ψ*α2*((R*Tc2)**2))/Pc2
        b_eos2 = (Ω*R*(Tc2))/(Pc2)
        return a_eos1,b_eos1,a_eos2,b_eos2,ε,σ

def calcϕ(x1,E,EdE,T,P):

    a_eos1,b_eos1,a_eos2,b_eos2,ε,σ = eos(EdE,T) 
    a=a_eos1*x1**2+2*x1*(1-x1)*((a_eos1*a_eos2)**(1/2))*(1-Kij)+a_eos2*((1-x1)**2)
    b= x1*b_eos1+(1-x1)*b_eos2
    q = a/(b*R*(T)) 
    q1barra = q*((((2*x1*a_eos1)+(2*(1-x1)*((a_eos1*a_eos2)**(1/2))*(1-Kij)))/a)-(b_eos1/b))
    q2barra = q*((((2*(1-x1)*a_eos2)+(2*x1*((a_eos1*a_eos2)**(1/2))*(1-Kij)))/a)-(b_eos2/b))
    β = (b*P)/(R*(T))
    if E == 'L':
        def f(Z):
            return β+((Z+(ε*β))*((Z+(σ*β)))*((1+β-Z)/(q*β)))-Z
        Z=fsolve(f,β*1.001)
    if E == 'V':
        def f(Z):
            return 1+β-(q*β)*((Z-β)/((Z+ε*β)*(Z+σ*β)))-Z
        Z=fsolve(f,1)  
    if EdE == '1':
        I = β/Z
    else:
        I = (1/(σ-ε))*ln((Z+σ*β)/(Z+ε*β))
    ϕ1 = math.exp(((b_eos1/b)*(Z-1)-ln(Z-β)-q1barra*I))
    ϕ2 = math.exp(((b_eos2/b)*(Z-1)-ln(Z-β)-q2barra*I))
    return ϕ1,ϕ2

def BolPy(EdE,x1,y1,T,P):
            tol = 10**(-9)
            IT = 0
            ITmax = 100
            y2= 0
            h = 10**(-4)
            a_eos1,b_eos1,a_eos2,b_eos2,ε,σ = eos(EdE,T) 
            def bolPy_int(x1,y1,T,P):
                    ITmax = 100
                    tol = 10**(-9)
                    ϕ1l,ϕ2l=calcϕ(x1,'L',EdE,T,P)
                    IT = 0
                    delta = 1
                    sum_1 = 0
                    while  (IT < ITmax) and (abs(delta) > tol):
                        ϕ1v,ϕ2v=calcϕ(y1,'V',EdE,T,P)
                        Kixi = (((ϕ1l/ϕ1v)*x1)+((ϕ2l/ϕ2v)*(1-x1)))
                        y1 = ((ϕ1l/ϕ1v)*x1)
                        y2 = ((ϕ2l/ϕ2v)*(1-x1))
                        delta = Kixi - sum_1
                        sum_1 = Kixi
                        IT += 1
                    return y1,y2
            while abs(y1+y2-1)>tol and (IT < ITmax):
                IT += 1
                y1,y2 = bolPy_int(x1,y1,T,P)
                y1_d,y2_d = bolPy_int(x1,y1,T,P+h)
                dP = ((y1_d+y2_d-1)-(y1+y2-1))/h
                P =P-(y1+y2-1)/dP
            return y1,y2,P,IT

def DewPx(EdE,x1,y1,T,P):
            tol = 10**(-9)
            IT = 0
            ITmax = 100
            x2= 0
            a_eos1,b_eos1,a_eos2,b_eos2,ε,σ = eos(EdE,T) 
            def dewPx_int(x1,y1,T,P):
                    ITmax = 100
                    tol = 10**(-9)
                    ϕ1v,ϕ2v=calcϕ(y1,'V',EdE,T,P)
                    
                    IT = 0
                    delta = 1
                    sum_1 = 0
                    while  (IT < ITmax) and (abs(delta) > tol):
                        IT += 1
                        ϕ1l,ϕ2l=calcϕ(x1,'L',EdE,T,P)
                        
                        x1 = y1/(ϕ1l/ϕ1v)
                        x2 = (1-y1)/(ϕ2l/ϕ2v)
                        xi = x1+x2
                        delta = xi - sum_1
                        sum_1 = xi
                    return x1, x2
            h = 10**(-4)
            while ((1-tol) > (x1+x2) or (x1+x2) > (1+tol)) and (IT < ITmax):
                IT += 1
                x1,x2 = dewPx_int(x1,y1,T,P)
                x1_d,x2_d = dewPx_int(x1,y1,T,P+h)
                dP = ((1-(x1_d+x2_d))-(1-(x1+x2)))/h
                P = P -(1-(x1+x2))/dP
            return x1,x2,P,IT

def BolTy(EdE,x1,y1,T,P):
            tol = 10**(-9)
            IT = 0
            ITmax = 100
            y2= 0
            h = 10**(-4)
            
            def bolTy_int(x1,y1,T,P):
                delta = 1
                tol = 10**(-9)
                IT = 0
                ITmax = 100
                sum_1 = 0
                while  (IT < ITmax) and (abs(delta) > tol):
                        a_eos1,b_eos1,a_eos2,b_eos2,ε,σ = eos(EdE,T) 
                        
                        ϕ1l,ϕ2l=calcϕ(x1,'L',EdE,T,P)
                        ϕ1v,ϕ2v=calcϕ(y1,'V',EdE,T,P)
    
                        Kixi = (((ϕ1l/ϕ1v)*x1)+((ϕ2l/ϕ2v)*(1-x1)))
                        y1 = ((ϕ1l/ϕ1v)*x1)
                        y2 = ((ϕ2l/ϕ2v)*(1-x1))
                        delta = Kixi - sum_1
                        sum_1 = Kixi
                        IT += 1
                return y1,y2
            while ((1-tol) > (y1+y2) or (y1+y2) > (1+tol)) and (IT < ITmax):
               IT += 1
               y1,y2 = bolTy_int(x1,y1,T,P)
               y1_d,y2_d = bolTy_int(x1,y1,T+h,P)
               dT = ((y1_d+y2_d-1)-(y1+y2-1))/h
               T =T-(y1+y2-1)/dT
            return y1,y2,T,IT

def DewTx(EdE,x1,y1,T,P):
            tol = 10**(-9)
            IT = 0
            ITmax = 100
            x2= 0
             
            def dewTx_int(x1,y1,T,P):
                    ITmax = 100
                    tol = 10**(-9)
                    IT = 0
                    delta = 1
                    sum_1 = 0
                    while  (IT < ITmax) and (abs(delta) > tol):
                        IT += 1
                        a_eos1,b_eos1,a_eos2,b_eos2,ε,σ = eos(EdE,T)
                        
                        ϕ1v,ϕ2v=calcϕ(y1,'V',EdE,T,P)
                        ϕ1l,ϕ2l=calcϕ(x1,'L',EdE,T,P)
                        
                        x1 = y1/(ϕ1l/ϕ1v)
                        x2 = (1-y1)/(ϕ2l/ϕ2v)
                        xi = x1+x2
                        delta = xi - sum_1
                        sum_1 = xi
                    return x1, x2
            h = 10**(-4)
            while ((1-tol) > (x1+x2) or (x1+x2) > (1+tol)) and (IT < ITmax):
                IT += 1
                x1,x2 = dewTx_int(x1,y1,T,P)
                x1_d,x2_d = dewTx_int(x1,y1,T+h,P)
                dT = ((1-(x1_d+x2_d))-(1-(x1+x2)))/h
                T = T -(1-(x1+x2))/dT
            return x1,x2,T,IT

def calcest(EdE,x1,y1,T,P):
    def calcest_int(EdE,x1,y1,T,P):
        a_eos1,b_eos1,a_eos2,b_eos2,ε,σ = eos(EdE,T)
        al=a_eos1*x1**2+2*x1*(1-x1)*((a_eos1*a_eos2)**(1/2))*(1-Kij)+a_eos2*((1-x1)**2)
        bl= x1*b_eos1+(1-x1)*b_eos2
        ql = al/(bl*R*(T)) 
        q1lbarra = ql*((((2*x1*a_eos1)+(2*(1-x1)*((a_eos1*a_eos2)**(1/2))*(1-Kij)))/al)-(b_eos1/bl))
        βl = (bl*P)/(R*(T))
        def fl(Zl):
            return βl+((Zl+(ε*βl))*((Zl+(σ*βl)))*((1+βl-Zl)/(ql*βl)))-Zl
        Zl=fsolve(fl,βl*1.001)
        if EdE == '1':
            Il = βl/Zl
        else:
            Il = (1/(σ-ε))*ln((Zl+σ*βl)/(Zl+ε*βl))
        ϕ1l = math.exp(((b_eos1/bl)*(Zl-1)-ln(Zl-βl)-q1lbarra*Il))
        return ϕ1l
    h = 1e-4
    ϕ1l = calcest_int(EdE,x1,y1,T,P)
    ϕ1ld = calcest_int(EdE,x1+h,y1,T,P)
    dfug = ((ϕ1ld*(x1+h))-(ϕ1l*x1))/h
    return dfug

def calcz(EdE,x1,y1,T,P):
    a_eos1,b_eos1,a_eos2,b_eos2,ε,σ = eos(EdE,T)
    al=a_eos1*x1**2+2*x1*(1-x1)*((a_eos1*a_eos2)**(1/2))*(1-Kij)+a_eos2*((1-x1)**2)
    bl= x1*b_eos1+(1-x1)*b_eos2
    ql = al/(bl*R*(T)) 
    βl = (bl*P)/(R*(T))
    def fl(Zl):
        return βl+((Zl+(ε*βl))*((Zl+(σ*βl)))*((1+βl-Zl)/(ql*βl)))-Zl
    Zl=fsolve(fl,βl*1.001)
    av= a_eos1*y1**2+2*y1*(1-y1)*((a_eos1*a_eos2)**(1/2))*(1-Kij)+a_eos2*((1-y1)**2)
    bv= y1*b_eos1+(1-y1)*b_eos2
    βv = bv*P/(R*(T))
    qv = av/(bv*R*(T)) 
    def fv(Zv):
        return 1+βv-(qv*βv)*((Zv-βv)/((Zv+ε*βv)*(Zv+σ*βv)))-Zv
    Zv=fsolve(fv,1) 
    return Zl,Zv

def func(x):
    x1a = x[0]
    x1b = x[1]
    y1 = x[2]
    P = x[3]
    ϕ1a,ϕ2a=calcϕ(x1a,'L',EdE,T,P)
    ϕ1b,ϕ2b=calcϕ(x1b,'L',EdE,T,P)
    ϕ1v,ϕ2v=calcϕ(y1,'V',EdE,T,P)
    f = numpy.array([x1a*ϕ1a-x1b*ϕ1b,(1-x1a)*ϕ2a-(1-x1b)*ϕ2b,x1a*ϕ1a-y1*ϕ1v,(1-x1a)*ϕ2a-(1-y1)*ϕ2v])
    return f.reshape(len(x),1)

def func2(x):
    x1a = x[0]
    x1b = x[1]
    y1 = x[2]
    T = x[3]
    ϕ1a,ϕ2a=calcϕ(x1a,'L',EdE,T*300,P)
    ϕ1b,ϕ2b=calcϕ(x1b,'L',EdE,T*300,P)
    ϕ1v,ϕ2v=calcϕ(y1,'V',EdE,T*300,P)
    f = numpy.array([x1a*ϕ1a-x1b*ϕ1b,(1-x1a)*ϕ2a-(1-x1b)*ϕ2b,x1a*ϕ1a-y1*ϕ1v,(1-x1a)*ϕ2a-(1-y1)*ϕ2v])
    return f.reshape(len(x),1) 
    
def Jac(x):
    F = func(x)
    J = np.zeros((len(x),len(x)))
    for i in range(len(x)):
        xpert = x.copy()      
        xpert[i] = x[i]+x[i]*1e-3+1e-6
        Fpert = func(xpert)
        der = (Fpert-F)/(xpert[i]-x[i])
        for j in range(len(x)):
            J[j,i] = der[j]
    return J
    
def Jac2(x):
    F = func2(x)
    J = np.zeros((len(x),len(x)))
    for i in range(len(x)):
        xpert = x.copy()      
        xpert[i] = x[i]+x[i]*1e-3+1e-6
        Fpert = func2(xpert)
        der = (Fpert-F)/(xpert[i]-x[i])
        for j in range(len(x)):
            J[j,i] = der[j]
    return J

def ELLVP(EdE,x1a,x1b,y1,T,P):
    
    
    IT=0
    error= 1
    tol = 1e-6
    ITmax = 100
    M=4
    N=4
    
    x_0 =anp.array([x1a,x1b,y1,P],dtype=float).reshape(N,1)
    
    while anp.any(abs(error) > tol) and IT < ITmax:
        
        fun_evaluate= anp.array(func(x_0)).reshape(M,1)
        jac = Jac(x_0)
        
        x_new = x_0 - anp.linalg.inv(jac)@fun_evaluate
        
        error = x_new - x_0
        x_0 = x_new
        IT+= 1
    return x_new,IT

def ELLVT(EdE,x1a,x1b,y1,T,P):
    Trel = T/300
    IT=0
    error= 1
    tol = 1e-6
    ITmax = 100
    M=4
    N=4
    
    x_0 =anp.array([x1a,x1b,y1,Trel],dtype=float).reshape(N,1)
    
    while anp.any(abs(error) > tol) and IT < ITmax:
        fun_evaluate= anp.array(func2(x_0)).reshape(M,1)
        jac = Jac2(x_0)
        x_new = x_0 - anp.linalg.inv(jac)@fun_evaluate
        
        error = x_new - x_0
        x_0 = x_new
        IT+= 1
    return x_new,IT

print('')
print('Bem vindo(a) ao termoSolver, é um prazer ajuda-lo')
print('Por favor, selecione o número da opção que deseja:')
print('')
print('0 - Lista de moléculas')
print('1 - Diagrama P-xy ou T-xy por Raoult')
print('2 - Calculo de ponto de bolha ou orvalho por Raoult')
print('3 - Calculo de Flash')
print('4 - Cálculo de ponto de bolha ou orvalho pela abordagem ϕ-ϕ')
print('5 - Diagrama P-xy ou T-xy pela abordagem ϕ-ϕ')
resposta = input()

if resposta == "0":
    print('As moléculas que podem ser utilizadas em todos os cálculos, com dados do apêndicie B do Van Ness, são:')
    lista_de_moleculas()
    print('')
    print('Por favor, selecione o número da opção que deseja:')
    print('')
    print('1 - Diagrama P-xy ou T-xy por Raoult')
    print('2 - Calculo de ponto de bolha ou orvalho')
    print('3 - Calculo de Flash')
    print('4 - Cálculo de ponto de bolha ou orvalho pela abordagem ϕ-ϕ')
    print('5 - Diagrama P-xy ou T-xy pela abordagem ϕ-ϕ')
    resposta = input()

if resposta == "1":
    molecula1,molecula2=inputmolec()
    print('')
    print('Você quer montar um gráfico(binário) P-xy ou T-xy?')
    print('1 - P-xy')
    print('2 - T-xy')
    grafico = input()

    if grafico == "1":
        print("Qual a temperatura(°C) do sistema?")
        temperatura = input()
        def leitura():
            c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
            P1sat = 0
            P2sat = 0
            for linha in c.fetchall():
                print(linha)
                temp = math.exp(linha[1] - (linha[2]/(float(temperatura) + linha[3])))
                if (linha[0] == molecula1):
                    P1sat = temp
                if (linha[0] == molecula2):
                    P2sat = temp
            print(P1sat,P2sat)
            x1 = 0.0
            output = []
            output1 = []
            output2 = []
            while x1 <= 1:
                P = P2sat + (P1sat - P2sat)*x1
                y1 = (x1*P1sat)/P
                output.append(x1)
                x1 = x1 + 0.2
                output1.append(y1)
                output2.append(P)
            print(output,output1,output2)
        
            plt.ylabel('P/kPa')
            plt.xlabel('x1,y1')
            plt.plot(output,output2,output1,output2)
            plt.show()
            
    elif grafico == '2':
        print("Qual a Pressão do sistema, em kPa?")
        pressao = input()
        def leitura():
            c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
            T1sat = 0.0
            T2sat = 0.0
            for linha1 in c.fetchall():
                temp1 = (((linha1[2])/(linha1[1]-math.log(float(pressao))))-linha1[3])
                if (linha1[0] == molecula1):
                    T1sat = temp1
                elif(linha1[0] == molecula2):
                    T2sat = temp1
                    
                print(T1sat,T2sat,linha1)
                
            if (T1sat < T2sat):
                P1sat = 0.0
                P2sat = 0.0
                output = []
                output1 = []
                output2 = []
                while T1sat < T2sat:
                    c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
                    for linha1 in c.fetchall():
                        temp2 = math.exp(linha1[1]-(linha1[2]/(T1sat + linha1[3])))
                        if (linha1[0] == molecula1):
                            P1sat = temp2
                        else:
                            P2sat = temp2
                    x1 = (float(pressao) - P2sat)/(P1sat - P2sat)
                    output.append(x1)
                    y1 = (x1*P1sat)/float(pressao)

                    output1.append(y1)
                    output2.append(T1sat) 
                    T1sat = T1sat + 2           
                output.append(0)
                output1.append(0)
                output2.append(T2sat)
                print(output,output1,output2)            
                
                plt.ylabel('t/°C')    
                plt.xlabel('x1,y1')
                plt.plot(output,output2,output1,output2)
                plt.show()
                
            elif (T1sat > T2sat):
                P1sat = 0.0
                P2sat = 0.0
                output3 = []
                output4 = []
                output5 = []
                while T2sat < T1sat:
                    c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
                    for linha1 in c.fetchall():
                        temp2 = math.exp(linha1[1]-(linha1[2]/(T1sat + linha1[3])))
                        if (linha1[0] == molecula1):
                            P1sat = temp2
                        else:
                            P2sat = temp2
                    x1 = (float(pressao) - P2sat)/(P1sat - P2sat)
                    output3.append(x1)
                    y1 = (x1*P1sat)/float(pressao)
                    
                    output4.append(y1)
                    output5.append(T1sat)  
                    T1sat = T1sat - 2
                                
                output3.append(0)
                output4.append(0)
                output5.append(T1sat)
                print(output3,output4,output5)            
                
                plt.ylabel('t/°C')    
                plt.xlabel('x1,y1')
                plt.plot(output3,output5,output4,output5)
                plt.show()
    leitura()
    c.close()
    conn.close()    

if resposta == "2":
    molecula1,molecula2=inputmolec()
    print('')
    print('Para o calculo dos pontos de bolha ou orvalho, você possui qual das opções abaixo?')
    print('Por favor, selecione o número da opção e aperte o enter')
    print('1 - x1')
    print('2 - y1')
    resposta3 = input()
    print('')
    print('1 - Pressão')
    print('2 - Temperatura')
    resposta4 = input()

    if resposta3 == '1' and resposta4 == '2':    
        print('Qual a fração molar de liquido do componente mais leve? (x1)')
        x1 = input()
        print('Qual a Temperatura(°C)?')
        temperatura = input()
        def leitura():
            c.execute("SELECT * FROM stuffToPlot WHERE molecula = '"+ molecula1 +"' OR molecula = '" + molecula2 + "'")
            P1sat = 0
            P2sat = 0
            for linha in c.fetchall():
                print(linha)
                temp = math.exp(linha[1] - (linha[2]/(float(temperatura) + linha[3])))
                if (linha[0] == molecula1):
                    P1sat = temp
                else:
                    P2sat = temp                   
            Pressao = float(x1)*P1sat + (1-float(x1))*P2sat
            y1 = float(x1)*P1sat/float(Pressao)
            print ('O calculo de Bolha P foi concluido:')
            print('o y1 é ' + str(y1))
            print('O Pressão é ' + str(Pressao))

    if resposta3 == '2' and resposta4 == '2':
        print('Qual a fração molar do vapor do componente mais leve? (y1)')
        y1 = input()
        print('Qual a Temperatura(°C)?')
        temperatura = input()        
        def leitura():
            c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
            P1sat = 0
            P2sat = 0
            for linha in c.fetchall():
                temp = math.exp(linha[1] - (linha[2]/(float(temperatura) + linha[3])))
                if (linha[0] == molecula1):
                    P1sat = temp
                else:
                    P2sat = temp                   
            Pressao = 1/((float(y1)/P1sat)+(1-float(y1))/P2sat)
            x1 = float(y1)*Pressao/P1sat
            print ('O calculo de Orvalho P foi concluido:')
            print('o valor de x1 é ' + str(x1))
            print('A Pressão é ' + str(Pressao) + 'kPa')
    
    if resposta3 == '2' and resposta4 == '1':
        print('Qual a fração molar de vapor do componente mais leve? (y1)')
        y1 = input()
        print('Qual a Pressão(kPa)?')
        pressao = input()
        def leitura():
            c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
            T1sat = 0
            T2sat = 0
            for linha in c.fetchall():
                temp = (linha[2]/(linha[1]-ln(float(pressao)))) - linha[3]
                if (linha[0] == molecula1):
                    T1sat = temp
                else:
                    T2sat = temp
            T = float(y1)*T1sat + (1-float(y1))*T2sat
            def leitura1():
                c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
                P1sat = 0
                P2sat = 0
                for linha in c.fetchall():
                    temp = math.exp(linha[1] - (linha[2]/(float(T) + linha[3])))
                    if (linha[0] == molecula1):
                        P1sat = temp
                        A = linha[1]
                        B = linha[2]
                        C = linha[3]
                    else:
                        P2sat = temp
                alfa = P1sat/P2sat
                P1sat_novo = float(pressao)*(float(y1) + (1-float(y1))*alfa)
                T2novo = B/(A-ln(float(P1sat_novo))) - C                                    
                def leitura2():
                    c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
                    P1sat1 = 0
                    P2sat1 = 0
                    for linha in c.fetchall():
                        temp = math.exp(linha[1] - (linha[2]/(float(T2novo) + linha[3])))
                        if (linha[0] == molecula1):
                            P1sat1 = temp
                            A = linha[1]
                            B = linha[2]
                            C = linha[3]
                        else:
                            P2sat1 = temp
                    alfa = P1sat1/P2sat1
                    P1sat_novo1 = float(pressao)*(float(y1) + (1-float(y1))*alfa)
                    T2novo1 = B/(A-ln(float(P1sat_novo1))) - C
                    def leitura3():
                        c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
                        P1sat2 = 0
                        P2sat2 = 0
                        for linha in c.fetchall():
                            temp = math.exp(linha[1] - (linha[2]/(float(T2novo1) + linha[3])))
                            if (linha[0] == molecula1):
                                P1sat2 = temp
                                A = linha[1]
                                B = linha[2]
                                C = linha[3]
                            else:
                                P2sat2 = temp
                        alfa = P1sat2/P2sat2
                        P1sat_novo2 = float(pressao)*(float(y1) + (1-float(y1))*alfa)
                        T2novo2 = B/(A-ln(float(P1sat_novo2))) - C
                        def leitura4():
                            c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
                            P1sat3 = 0
                            P2sat3 = 0
                            for linha in c.fetchall():
                                temp = math.exp(linha[1] - (linha[2]/(float(T2novo2) + linha[3])))
                                if (linha[0] == molecula1):
                                    P1sat3 = temp
                                    A = linha[1]
                                    B = linha[2]
                                    C = linha[3]
                                else:
                                    P2sat3 = temp

                            alfa = P1sat3/P2sat3
                            P1sat_novo3 = float(pressao)*(float(y1) + (1-float(y1))*alfa)
                            T2novo3 = B/(A-ln(float(P1sat_novo3))) - C
                            def leitura5():
                                c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
                                P1sat4 = 0
                                P2sat4 = 0
                                for linha in c.fetchall():
                                    temp = math.exp(linha[1] - (linha[2]/(float(T2novo3) + linha[3])))
                                    if (linha[0] == molecula1):
                                        P1sat4 = temp
                                        A = linha[1]
                                        B = linha[2]
                                        C = linha[3]
                                    else:
                                        P2sat4 = temp
                                alfa = P1sat4/P2sat4
                                P1sat_novo4 = float(pressao)*(float(y1) + (1-float(y1))*alfa)
                                T2novo4 = B/(A-ln(float(P1sat_novo4))) - C
                                def leitura6():
                                    c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
                                    P1sat5 = 0
                                    P2sat5 = 0
                                    for linha in c.fetchall():
                                        temp = math.exp(linha[1] - (linha[2]/(float(T2novo4) + linha[3])))
                                        if (linha[0] == molecula1):
                                            P1sat5 = temp
                                            A = linha[1]
                                            B = linha[2]
                                            C = linha[3]
                                        else:
                                            P2sat5 = temp
                                    alfa = P1sat5/P2sat5
                                    P1sat_novo5 = float(pressao)*(float(y1) + (1-float(y1))*alfa)
                                    T2novo5 = B/(A-ln(float(P1sat_novo5))) - C
                                    def leitura7():
                                        c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
                                        P1sat6 = 0
                                        P2sat6 = 0
                                        for linha in c.fetchall():
                                            temp = math.exp(linha[1] - (linha[2]/(float(T2novo5) + linha[3])))
                                            if (linha[0] == molecula1):
                                                P1sat6 = temp
                                                A = linha[1]
                                                B = linha[2]
                                                C = linha[3]
                                            else:
                                                P2sat6 = temp
                                        alfa = P1sat6/P2sat6
                                        P1sat_novo6 = float(pressao)*(float(y1) + (1-float(y1))*alfa)
                                        T2novo6 = B/(A-ln(float(P1sat_novo6))) - C
                                        def leitura8():
                                            c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
                                            P1sat7 = 0
                                            P2sat7 = 0
                                            for linha in c.fetchall():
                                                temp = math.exp(linha[1] - (linha[2]/(float(T2novo6) + linha[3])))
                                                if (linha[0] == molecula1):
                                                    P1sat7 = temp
                                                    A = linha[1]
                                                    B = linha[2]
                                                    C = linha[3]
                                                else:
                                                    P2sat7 = temp
                                            alfa = P1sat7/P2sat7
                                            P1sat_novo7 = float(pressao)*(float(y1) + (1-float(y1))*alfa)
                                            T2novo7 = B/(A-ln(float(P1sat_novo7))) - C
                                            x1 = float(y1)*float(pressao)/P1sat_novo7
                                            print('O valor de x1 é ' + str(x1) + ' e o valor da temperatura é ' + str(T2novo7))                
                                        leitura8()
                                    leitura7()
                                leitura6()
                            leitura5()
                        leitura4()
                    leitura3()                    
                leitura2()                                      
            leitura1()
                                                
    if resposta3 == '1' and resposta4 == '1':
        print('Qual a fração molar de liquido do componente mais leve? (x1)')
        x1 = input()
        print('Qual a Pressão(kPa)?')
        pressao = input() 
        def leitura():
            c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
            T1sat = 0
            T2sat = 0
            for linha in c.fetchall():
                temp = (linha[2]/(linha[1]-ln(float(pressao)))) - linha[3]
                if (linha[0] == molecula1):
                    T1sat = temp
                else:
                    T2sat = temp
            T = float(x1)*T1sat + (1-float(x1))*T2sat
            def leitura1():
                c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
                P1sat = 0
                P2sat = 0
                for linha in c.fetchall():
                    temp = math.exp(linha[1] - (linha[2]/(float(T) + linha[3])))
                    if (linha[0] == molecula1):
                        P1sat = temp
                    else:
                        P2sat = temp
                        A = linha[1]
                        B = linha[2]
                        C = linha[3]
                alfa = P1sat/P2sat
                P2sat_novo = float(pressao)/(float(x1)*alfa + (1-float(x1)))
                T2novo = B/(A-ln(float(P2sat))) - C                                      
                def leitura2():
                    c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
                    P1sat1 = 0
                    P2sat1 = 0
                    for linha in c.fetchall():
                        temp = math.exp(linha[1] - (linha[2]/(float(T2novo) + linha[3])))
                        if (linha[0] == molecula1):
                            P1sat1 = temp
                        else:
                            P2sat1 = temp
                            A = linha[1]
                            B = linha[2]
                            C = linha[3]
                    alfa = P1sat1/P2sat1
                    P2sat_novo1 = float(pressao)/(float(x1)*alfa + (1-float(x1)))
                    T2novo1 = B/(A-ln(float(P2sat_novo1))) - C
                    def leitura3():
                        c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
                        P1sat2 = 0
                        P2sat2 = 0
                        for linha in c.fetchall():
                            temp = math.exp(linha[1] - (linha[2]/(float(T2novo1) + linha[3])))
                            if (linha[0] == molecula1):
                                P1sat2 = temp
                            else:
                                P2sat2 = temp
                                A = linha[1]
                                B = linha[2]
                                C = linha[3]
                        alfa = P1sat2/P2sat2
                        P2sat_novo2 = float(pressao)/(float(x1)*alfa + (1-float(x1)))
                        T2novo2 = B/(A-ln(float(P2sat_novo2))) - C
                        def leitura4():
                            c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
                            P1sat3 = 0
                            P2sat3 = 0
                            for linha in c.fetchall():
                                temp = math.exp(linha[1] - (linha[2]/(float(T2novo2) + linha[3])))
                                if (linha[0] == molecula1):
                                    P1sat3 = temp
                                else:
                                    P2sat3 = temp
                                    A = linha[1]
                                    B = linha[2]
                                    C = linha[3]
                            alfa = P1sat3/P2sat3
                            P2sat_novo3 = float(pressao)/(float(x1)*alfa + (1-float(x1)))
                            T2novo3 = B/(A-ln(float(P2sat_novo3))) - C
                            def leitura5():
                                c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
                                P1sat4 = 0
                                P2sat4 = 0
                                for linha in c.fetchall():
                                    temp = math.exp(linha[1] - (linha[2]/(float(T2novo3) + linha[3])))
                                    if (linha[0] == molecula1):
                                        P1sat4 = temp
                                    else:
                                        P2sat4 = temp
                                        A = linha[1]
                                        B = linha[2]
                                        C = linha[3]
                                alfa = P1sat4/P2sat4
                                P2sat_novo4 = float(pressao)/(float(x1)*alfa + (1-float(x1)))
                                T2novo4 = B/(A-ln(float(P2sat_novo4))) - C
                                def leitura6():
                                    c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
                                    P1sat5 = 0
                                    P2sat5 = 0
                                    for linha in c.fetchall():
                                        temp = math.exp(linha[1] - (linha[2]/(float(T2novo4) + linha[3])))
                                        if (linha[0] == molecula1):
                                            P1sat5 = temp
                                        else:
                                            P2sat5 = temp
                                            A = linha[1]
                                            B = linha[2]
                                            C = linha[3]
                                    alfa = P1sat5/P2sat5
                                    P2sat_novo5 = float(pressao)/(float(x1)*alfa + (1-float(x1)))
                                    T2novo5 = B/(A-ln(float(P2sat_novo5))) - C
                                    def leitura7():
                                        c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
                                        P1sat6 = 0
                                        P2sat6 = 0
                                        for linha in c.fetchall():
                                            temp = math.exp(linha[1] - (linha[2]/(float(T2novo5) + linha[3])))
                                            if (linha[0] == molecula1):
                                                P1sat6 = temp
                                            else:
                                                P2sat6 = temp
                                                A = linha[1]
                                                B = linha[2]
                                                C = linha[3]
                                        alfa = P1sat6/P2sat6
                                        P2sat_novo6 = float(pressao)/(float(x1)*alfa + (1-float(x1)))
                                        T2novo6 = B/(A-ln(float(P2sat_novo6))) - C
                                        def leitura8():
                                            c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
                                            P1sat7 = 0
                                            P2sat7 = 0
                                            for linha in c.fetchall():
                                                temp = math.exp(linha[1] - (linha[2]/(float(T2novo6) + linha[3])))
                                                if (linha[0] == molecula1):
                                                    P1sat7 = temp
                                                else:
                                                    P2sat7 = temp
                                                    A = linha[1]
                                                    B = linha[2]
                                                    C = linha[3]
                                            alfa = P1sat7/P2sat7
                                            P2sat_novo7 = float(pressao)/(float(x1)*alfa + (1-float(x1)))
                                            T2novo7 = B/(A-ln(float(P2sat_novo7))) - C
                                            y2 = (1-float(x1))*P2sat_novo7/float(pressao) 
                                            y1 = 1 - y2
                                            print('O valor de y1 é ' + str(y1) + ' e o valor da temperatura é ' + str(T2novo7))   
                                        leitura8()
                                    leitura7()
                                leitura6()
                            leitura5()
                        leitura4()
                    leitura3()                    
                leitura2()                                      
            leitura1()
    leitura()
    c.close()
    conn.close()
    
if resposta == '3':
    print('')
    print('Seu sistema é:')
    print('1 - Binário')
    print('2 - Ternário')
    print('3 - Quaternário')
    flash = input()

    if flash == '1':
        print('')
        print('Qual a mistura de compostos que você quer ?')
        print('Digite a primeira, aperte o enter, então repita para a segunda. Digite help para uma lista com as moleculas')
        molecula1 = input()
        if molecula1 == 'help':
            print('As moléculas compreendidas nesse software, com dados do apêndicie B do Van Ness, são:')
            lista_de_moleculas()
            print('')
            print('Qual a mistura de compostos que você quer montar a curva de equilibrio liq/vap?')
            print('Digite a primeira, aperte o enter, então repita para a segunda.')
            molecula1 = input()
            molecula2 = input()
        else:
            molecula2 = input()
        print('')
        print('Qual a fração de cada um na composição global? (z1,z2,z3)')
        z1 = input()
        z2 = input()
        print('')
        print('Qual a temperatura(°C) do sistema?')
        temperatura = input()
        print('')
        print('Qual a pressão do sistema?')
        pressao = input()
        def leitura():
            c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
            P1sat = 0
            P2sat = 0
            for linha in c.fetchall():
                temp = math.exp(linha[1] - (linha[2]/(float(temperatura) + linha[3])))
                if (linha[0] == molecula1):
                    P1sat = temp
                if (linha[0] == molecula2):
                    P2sat = temp
            Pbol = float(z1)*P1sat + float(z2)*P2sat 
            Porv = 1/((float(z1)/P1sat)+(float(z2)/P2sat))
            k1 = P1sat/float(pressao)
            k2 = P2sat/float(pressao)
            v = 0.1
            for i in range(100):
                primeiro_termo = (float(z1)*k1/(1+(k1-1)*v))
                segundo_termo = (float(z2)*k2/(1 + v*(k2-1)))
                derivada_primeiro_termo = (float(k1)-1)*k1*float(z1)/(((k1-1)*v+1)**2)
                derivada_segundo_termo = (float(k2)-1)*k2*float(z2)/(((k2-1)*v+1)**2)
                vnew = v - (primeiro_termo + segundo_termo - 1)/(- derivada_primeiro_termo - derivada_segundo_termo)
                if abs(vnew - v) < 0.01: break
                v = vnew
            l = 1 - vnew
            y1 = float(z1)*k1/(1+vnew*(k1-1))
            y2 = float(z2)*k2/(1+vnew*(k2-1))
            x1 = y1/k1
            x2 = y2/k2
            x = x1+x2
            y = y1+y2
            total = v + l
            print('')
            print('Os resultados são:')
            print('')
            print('x1 = ' + str(x1))
            print('x2 = ' + str(x2))
            print('y1 = ' + str(y1))
            print('y2 = ' + str(y2))
            print('L = ' + str(l))
            print('V = ' + str(v))
            print('Lembrando que o somatorio das frações molares tem que dar 1(ou bem próximo), assim como o somatorio da parte vapor e líquida, então confira:')
            print('')
            print('x1 + x2 = ' + str(x))
            print('y1 + y2 = ' + str(y))
            print('V + L = ' + str(total))
            print('')

    if flash == '2':
        print('')
        print('Qual a mistura de compostos que você quer?')
        print('Digite a primeira, aperte o enter, então repita para a segunda e terceira. Digite help para uma lista com as moleculas')
        molecula1 = input()
        if molecula1 == 'help':
            print('As moléculas compreendidas nesse software, com dados do apêndicie B do Van Ness, são:')
            lista_de_moleculas()
            print('')
            print('Qual a mistura de compostos que você quer?')
            print('Digite a primeira, aperte o enter, então repita para a segunda.')
            molecula1 = input()
            molecula2 = input()
            molecula3 = input()
        else:
            molecula2 = input()
            molecula3 = input()
        print('')
        print('Qual a fração de cada um na composição global? (z1,z2,z3)')
        z1 = input()
        z2 = input()
        z3 = input()
        print('')
        print('Qual a temperatura(°C) do sistema?')
        temperatura = input()
        print('')
        print('Qual a pressão do sistema?')
        pressao = input()
        def leitura():
            c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "' OR molecula = '" + molecula3 + "'")
            P1sat = 0
            P2sat = 0
            P3sat = 0
            for linha in c.fetchall():
                temp = math.exp(linha[1] - (linha[2]/(float(temperatura) + linha[3])))
                if (linha[0] == molecula1):
                    P1sat = temp
                if (linha[0] == molecula2):
                    P2sat = temp
                if (linha[0] == molecula3):
                    P3sat = temp
            Pbol = float(z1)*P1sat + float(z2)*P2sat + float(z3)*P3sat
            Porv = 1/((float(z1)/P1sat)+(float(z2)/P2sat)+(float(z3)/P3sat))
            k1 = P1sat/float(pressao)
            k2 = P2sat/float(pressao)
            k3 = P3sat/float(pressao)
            v = 0.1
            for i in range(100):
                primeiro_termo = (float(z1)*k1/(1+(k1-1)*v))
                segundo_termo = (float(z2)*k2/(1 + v*(k2-1)))
                terceiro_termo = (float(z3)*k3/(1 + v*(k3-1)))
                derivada_primeiro_termo = (float(k1)-1)*k1*float(z1)/(((k1-1)*v+1)**2)
                derivada_segundo_termo = (float(k2)-1)*k2*float(z2)/(((k2-1)*v+1)**2)
                derivada_terceiro_termo = (float(k3)-1)*k3*float(z3)/(((k3-1)*v+1)**2)
                vnew = v - (primeiro_termo + segundo_termo + terceiro_termo -1)/(- derivada_primeiro_termo - derivada_segundo_termo - derivada_terceiro_termo)
                if abs(vnew - v) < 0.01: break
                v = vnew
            l = 1 - vnew
            y1 = float(z1)*k1/(1+vnew*(k1-1))
            y2 = float(z2)*k2/(1+vnew*(k2-1))
            y3 = float(z3)*k3/(1+ vnew*(k3-1))
            x1 = y1/k1
            x2 = y2/k2
            x3 = y3/k3
            x = x1+x2+x3
            y = y1+y2+y3
            total = v + l
            print('')
            print('Os resultados são:')
            print('')
            print('x1 = ' + str(x1))
            print('x2 = ' + str(x2))
            print('x3 = ' + str(x3))
            print('y1 = ' + str(y1))
            print('y2 = ' + str(y2))
            print('y3 = ' + str(y3))
            print('L = ' + str(l))
            print('V = ' + str(v))
            print('')
            print('Lembrando que o somatorio das frações molares tem que dar 1(ou bem próximo), assim como o somatorio da parte vapor e líquida, então confira:')
            print('')
            print('x1 + x2 + x3 = ' + str(x))
            print('y1 + y2 + y3 = ' + str(y))
            print('V + L = ' + str(total))
            print('')

    if flash == '3':
        print('')
        print('Qual a mistura de compostos que você quer?')
        print('Digite a primeira, aperte o enter, então repita para a segunda, terceira e quarta. Digite help para uma lista com as moleculas')
        molecula1 = input()
        if molecula1 == 'help':
            print('As moléculas compreendidas nesse software, com dados do apêndicie B do Van Ness, são:')
            lista_de_moleculas()
            print('')
            print('Qual a mistura de compostos que você quer?')
            print('Digite a primeira, aperte o enter, então repita para a segunda.')
            molecula1 = input()
            molecula2 = input()
            molecula3 = input()
            molecula4 = input()
        else:
            molecula2 = input()
            molecula3 = input()
            molecula4 = input()
        print('')
        print('Qual a fração de cada um na composição global? (z1,z2,z3,z4)')
        z1 = input()
        z2 = input()
        z3 = input()
        z4 = input()
        print('')
        print('Qual a temperatura(°C) do sistema?')
        temperatura = input()
        print('')
        print('Qual a pressão do sistema?')
        pressao = input()
        def leitura():
            c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "' OR molecula = '" + molecula3 + "' OR molecula = '" + molecula4 + "'")
            P1sat = 0
            P2sat = 0
            P3sat = 0
            P4sat = 0
            for linha in c.fetchall():
                temp = math.exp(linha[1] - (linha[2]/(float(temperatura) + linha[3])))
                if (linha[0] == molecula1):
                    P1sat = temp
                if (linha[0] == molecula2):
                    P2sat = temp
                if (linha[0] == molecula3):
                    P3sat = temp
                if (linha[0] == molecula4):
                    P4sat = temp
            Pbol = float(z1)*P1sat + float(z2)*P2sat + float(z3)*P3sat + float(z4)*P4sat
            Porv = 1/((float(z1)/P1sat)+(float(z2)/P2sat)+(float(z3)/P3sat)+(float(z4)/P4sat))
            k1 = P1sat/float(pressao)
            k2 = P2sat/float(pressao)
            k3 = P3sat/float(pressao)
            k4 = P4sat/float(pressao)
            v = 0.1
            for i in range(100):
                primeiro_termo = (float(z1)*k1/(1+(k1-1)*v))
                segundo_termo = (float(z2)*k2/(1 + v*(k2-1)))
                terceiro_termo = (float(z3)*k3/(1 + v*(k3-1)))
                quarto_termo = (float(z4)*k4/(1 + v*(k4-1)))
                derivada_primeiro_termo = (float(k1)-1)*k1*float(z1)/(((k1-1)*v+1)**2)
                derivada_segundo_termo = (float(k2)-1)*k2*float(z2)/(((k2-1)*v+1)**2)
                derivada_terceiro_termo = (float(k3)-1)*k3*float(z3)/(((k3-1)*v+1)**2)
                derivada_quarto_termo = (float(k4)-1)*k4*float(z4)/(((k4-1)*v+1)**2)
                vnew = v - (primeiro_termo + segundo_termo + terceiro_termo + quarto_termo - 1)/(- derivada_primeiro_termo - derivada_segundo_termo - derivada_terceiro_termo - derivada_quarto_termo)
                if abs(vnew - v) < 0.01: break
                v = vnew
            l = 1 - vnew
            y1 = float(z1)*k1/(1+vnew*(k1-1))
            y2 = float(z2)*k2/(1+vnew*(k2-1))
            y3 = float(z3)*k3/(1+vnew*(k3-1))
            y4 = float(z4)*k4/(1+vnew*(k4-1))
            x1 = y1/k1
            x2 = y2/k2
            x3 = y3/k3
            x4 = y4/k4
            x = x1+x2+x3+x4
            y = y1+y2+y3+y4
            total = v + l
            print('')
            print('Os resultados são:')
            print('')
            print('x1 = ' + str(x1))
            print('x2 = ' + str(x2))
            print('x3 = ' + str(x3))
            print('x4 = ' + str(x4))
            print('y1 = ' + str(y1))
            print('y2 = ' + str(y2))
            print('y3 = ' + str(y3))
            print('y4 = ' + str(y4))
            print('L = ' + str(l))
            print('V = ' + str(v))
            print('Lembrando que o somatorio das frações molares tem que dar 1(ou bem próximo), assim como o somatorio da parte vapor e líquida, então confira:')
            print('')
            print('x1 + x2 + x3 + x4 = ' + str(x))
            print('y1 + y2 + y3 + y4 = ' + str(y))
            print('V + L = ' + str(total))
            print('')

    leitura()
    c.close()
    conn.close()

if resposta == "4":
    molecula1,molecula2 = inputmolec()
    c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
    for linha in c.fetchall():
        if (linha[0] == molecula1):
            ω1  = linha[4]
            Tc1 = linha[5]
            Pc1 = linha[6]
        if (linha[0] == molecula2):
            ω2  = linha[4]
            Tc2 = linha[5]
            Pc2 = linha[6]
    print('')
    print('Para o calculo dos pontos de bolha ou orvalho, você deve inputar Temperatura ou Pressão e x (fração molar da fase líquida) ou y (fração molar da fase vapor)')
    print('')
    print('Você deseja inputar T ou P?')
    print('1- Temperatura')
    print('2- Pressão')
    print('')
    resposta1 = input()
    print('Você deseja inputar x ou y?')
    print('1- x (fração molar na fase líquida)')
    print('2- y (fração molar na fase vapor)')
    print('')
    resposta2 = input()
    if resposta1 == '1' and resposta2 == '1':
        def leitura():
            global P,y1
            y1,y2,P,IT = BolPy(EdE,x1,y1,T,P)
            dfug = calcest(EdE,x1,y1,T,P)
            if IT<100:
                print('Fração molar de', molecula1,'na fase vapor: ', round(y1,4))
                print('Fração molar de', molecula2,'na fase vapor: ', round(y2,4))
                print('Pressão do ponto de bolha: ', round(P,4),'bar')
                print('Número de iterações do loop externo: ', IT)
            if IT >= 100:
                print ('ERRO: O cálculo não convergiu')
            if dfug < 0:
                print('')
                print('ATENÇÃO! A fase líquida apresentou instabilidade')
        print('')
        temperatura = input("Qual a temperatura(°C) do sistema? ")
        T=float(temperatura)+273.15
        print('')
        x1 = float(input('Qual a fração molar de '+ molecula1 +' na fase líquida? (Digite um valor entre 0 e 1 para o valor de x1) '))
        print('')
        print('Você deseja inputar as estimativas inicias para P e y1 ou gostaria de uma estimativa automática considerando a Lei de Raoult ?')
        print('1 - Desejo inputar P e y1')
        print('2 - Desejo uma estimativa automática considerando a Lei de Raoult')
        respostaest = input()
        if respostaest == '1':
            P = float(input('Qual é a estimativa inicial para a pressão (em bar)? '))
            print('')
            y1 = float(input('Qual é a sua estimativa inicial para a fração molar de '+ molecula1 +' na fase vapor? (Digite uma estimativa entre 0 e 1 para y1) '))
        if respostaest == '2':
            c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
            for linha in c.fetchall():
                temp = math.exp(linha[1] - (linha[2]/((T-273.15) + linha[3])))
                if (linha[0] == molecula1):
                    P1sat = temp/100
                if (linha[0] == molecula2):
                    P2sat = temp/100
            P = (P2sat + (P1sat - P2sat)*x1)
            y1 = (x1*P1sat)/P
    if resposta1 == '1' and resposta2 == '2':
        def leitura():
            global P,x1
            x1,x2,P,IT = DewPx(EdE,x1,y1,T,P)
            dfug = calcest(EdE,x1,y1,T,P)
            if IT<100:
                print('Fração molar de', molecula1,'na fase líquida: ', round(x1,4))
                print('Fração molar de', molecula2,'na fase líquida: ', round(x2,4))
                print('Pressão do ponto de orvalho: ', round(P,4),'bar')
                print('Número de iterações do loop externo: ', IT)
            if IT >= 100:
                print ('ERRO: O cálculo não convergiu')
            if dfug < 0:
                print('')
                print('ATENÇÃO! A fase líquida apresentou instabilidade')
        print('')
        temperatura = input("Qual a temperatura(°C) do sistema? ")
        T=float(temperatura)+273.15
        print('')
        y1 = float(input('Qual a fração molar de '+ molecula1 + ' na fase vapor? (Digite um valor entre 0 e 1 para o valor de y1) '))
        print('')
        print('Você deseja inputar as estimativas inicias para P e x1 ou gostaria de uma estimativa automática considerando a Lei de Raoult ?')
        print('1 - Desejo inputar P e x1')
        print('2 - Desejo uma estimativa automática considerando a Lei de Raoult')
        respostaest = input()
        if respostaest == '1':
            P = float(input('Qual é a estimativa inicial para a pressão (em bar)? '))
            print('')
            x1 = float(input('Qual é a sua estimativa inicial para a fração molar de '+ molecula1 +' na fase liquida? (Digite uma estimativa entre 0 e 1 para x1) '))
            print('')    
        if respostaest == '2':
            c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
            for linha in c.fetchall():
                temp = math.exp(linha[1] - (linha[2]/((T-273.15) + linha[3])))
                if (linha[0] == molecula1):
                    P1sat = temp/100
                if (linha[0] == molecula2):
                    P2sat = temp/100
            x1 = y1*P2sat/(P1sat-y1*(P1sat-P2sat))
            P = (P2sat + (P1sat - P2sat)*x1)
    if resposta1 == '2' and resposta2 == '1':
        def leitura():
            global T,y1
            y1,y2,T,IT = BolTy(EdE,x1,y1,T,P)
            dfug = calcest(EdE,x1,y1,T,P)
            if IT<100:
                print('Fração molar de', molecula1,'na fase vapor: ', round(y1,4))
                print('Fração molar de', molecula2,'na fase vapor: ', round(y2,4))
                print('Temperatura do ponto de bolha: ', round(T-273.15,4),'°C')
                print('Número de iterações do loop externo: ', IT)
            if IT >= 100:
                print ('ERRO: O cálculo não convergiu')
            if dfug < 0:
                print('')
                print('ATENÇÃO! A fase líquida apresentou instabilidade')     
        print('')
        P = float(input("Qual a pressão(em bar) do sistema? "))
        print('')
        x1 = float(input('Qual a fração molar de '+ molecula1 +' na fase líquida? (Digite um valor entre 0 e 1 para o valor de x1) ')) 
        print('')
        print('Você deseja inputar as estimativas inicias para T e y1 ou gostaria de uma estimativa automática considerando a Lei de Raoult ?')
        print('1 - Desejo inputar T e y1')
        print('2 - Desejo uma estimativa automática considerando a Lei de Raoult')
        respostaest = input()
        if respostaest == '1':
            temperatura = input('Qual é a estimativa inicial para a temperatura (em °C)? ')
            T=float(temperatura)+273.15
            print('')
            y1 = float(input('Qual é a sua estimativa inicial para a fração molar de '+ molecula1 +' na fase vapor? (Digite uma estimativa entre 0 e 1 para y1) '))
            print('')
        if respostaest == '2':
            c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
            for linha in c.fetchall():
                temp1 = (((linha[2])/(linha[1]-math.log(P*100)))-linha[3])
                if (linha[0] == molecula1):
                    T1sat = temp1
                if (linha[0] == molecula2):
                    T2sat = temp1
            Temp = (T2sat + (T1sat - T2sat)*x1)
            c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
            for linha1 in c.fetchall():
                temp2 = math.exp(linha1[1]-(linha1[2]/(Temp + linha1[3])))
                if (linha1[0] == molecula1):
                    P1sat = temp2/100
            print(Temp,P1sat)
            y1 = (x1*P1sat)/P
            T = Temp+273.15
    if resposta1 == '2' and resposta2 == '2':
        def leitura():
            global T,x1
            x1,x2,T,IT = DewTx(EdE,x1,y1,T,P)
            dfug = calcest(EdE,x1,y1,T,P)
            if IT<100:
                print('Fração molar de', molecula1,'na fase líquida: ', round(x1,4))
                print('Fração molar de', molecula2,'na fase líquida: ', round(x2,4))
                print('Temperatura do ponto de orvalho: ', round(T-273.15,4),'°C')
                print('Número de iterações do loop externo: ', IT)
            if IT >= 100:
                print ('ERRO: O cálculo não convergiu')
            if dfug < 0:
                print('')
                print('ATENÇÃO! A fase líquida apresentou instabilidade')
        print('')
        P = float(input("Qual a pressão(em bar) do sistema? "))
        print('')
        y1 = float(input('Qual a fração molar de '+ molecula1 + ' na fase vapor? (Digite um valor entre 0 e 1 para o valor de y1) '))
        print('')
        print('Você deseja inputar as estimativas inicias para T e x1 ou gostaria de uma estimativa automática considerando a Lei de Raoult ?')
        print('1 - Desejo inputar T e x1')
        print('2 - Desejo uma estimativa automática considerando a Lei de Raoult')
        respostaest = input()
        if respostaest == '1':
            temperatura = input('Qual é a estimativa inicial para a temperatura (em °C)? ')
            T=float(temperatura)+273.15
            print('')
            x1 = float(input('Qual é a sua estimativa inicial para a fração molar de '+ molecula1 +' na fase liquida? (Digite uma estimativa entre 0 e 1 para x1) '))
            print('')
        if respostaest == '2': 
            c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
            for linha in c.fetchall():
                temp1 = (((linha[2])/(linha[1]-math.log(P*100)))-linha[3])
                if (linha[0] == molecula1):
                    T1sat = temp1
                if (linha[0] == molecula2):
                    T2sat = temp1

            Temp = y1*T1sat+(1-y1)*T2sat
            c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' ")
            for linha1 in c.fetchall():
                temp2 = math.exp(linha1[1]-(linha1[2]/(Temp + linha1[3])))
                if (linha1[0] == molecula1):
                    P1sat = temp2/100
            x1 = (y1*P)/P1sat
            T = Temp+273.15
    print('')
    print('Qual Equação de Estado você quer utilizar?')
    print('1- Van Der Waals')
    print('2- Redlich-Kwong')
    print('3- Soave-Redlich-Kwong')
    print('4- Peng-Robinson')
    EdE = input()
    print('')
    print('Qual o valor do parâmetro de interação binária (Kij) você deseja inputar para a mistura '+molecula1+'/'+molecula2+' ?')
    Kij = float(input())
    print('')
    leitura()
    c.close()
    conn.close()

if resposta == '5':

    print('Você quer montar um gráfico(binário) P-xy ou T-xy?')
    print('1 - P-xy')
    print('2 - T-xy')
    grafico = input()
    
    if grafico == '1':
        print('')
        print("Qual a temperatura(°C) do sistema?")
        temperatura = input()
        T=float(temperatura)+273.15
        molecula1,molecula2 = inputmolec()
        c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
        for linha in c.fetchall():
            temp = math.exp(linha[1] - (linha[2]/((T-273.15) + linha[3])))
            if (linha[0] == molecula1):
                P1sat = temp/100
                ω1  = linha[4]
                Tc1 = linha[5]
                Pc1 = linha[6]
            if (linha[0] == molecula2):
                P2sat = temp/100
                ω2  = linha[4]
                Tc2 = linha[5]
                Pc2 = linha[6]   
        def leitura():
                global T,res
    
                output = []
                output1 = []
                output2 = []
                output3 = []
                output4 = []
                output_new = []
                output1_new = []
                output2_new = []
                output5_new = []
                output6_new = []
                output7_new = []    
                
                P = P2sat
                y1 = 0
                
                tol = 1e-3
                for x1 in np.linspace(0,1,num=100):
                    y1,y2,P,IT = BolPy(EdE,x1,y1,T,P)
                    dfug = calcest(EdE,x1,y1,T,P)
                    Zl,Zv = calcz(EdE,x1,y1,T,P)
                    if dfug > 0 and abs(Zv-Zl)>tol and IT<99:
                            output.append(x1)
                            output1.append(y1)
                            output2.append(P) 
                    if dfug < 0:
                        output3.append(x1)
                        output4.append(P)
                if len(output3) > 0:
                    try:
                        x1a = output3[0]/2
                        x1b = (output3[-1]+1)/2
                        yellv = (x1a+x1b)/2
                        Pellv = (output4[0]+output4[-1])/2
                        res,IT=ELLVP(EdE,x1a,x1b,yellv,T,Pellv)
                        print('')
                        print('ATENÇÃO! a seguinte faixa de fração da fase líquida de '+molecula1+' apresentou instabilidade: ',res[0],'-',res[1])
                        print('')
                        y1 = 0
                        P = P2sat
                        for x1 in np.linspace(0,float(res[0]),num=50):
                            y1,y2,P,IT = BolPy(EdE,x1,y1,T,P)
                            Zl,Zv = calcz(EdE,x1,y1,T,P)
                            if abs(Zv-Zl)>tol and IT<99:
                                output_new.append(x1)
                                output1_new.append(y1)
                                output2_new.append(P)
                        x1 = float(res[1])
                        P = (P2sat + (P1sat - P2sat)*x1)
                        y1 = (x1*P1sat)/P
                        for x1 in np.linspace(float(res[1]),1,num=50):
                            y1,y2,P,IT = BolPy(EdE,x1,y1,T,P)
                            Zl,Zv = calcz(EdE,x1,y1,T,P)
                            if abs(Zv-Zl)>tol and IT<99:
                                output5_new.append(x1)
                                output6_new.append(y1)
                                output7_new.append(P)
                        plt.plot(output_new,output2_new,output1_new,output2_new)
                        plt.plot(output5_new,output7_new,output6_new,output7_new)
                        pontoellv1 = [res[0],res[1]]
                        pontoellv2 = [res[3],res[3]]
                        plt.plot(pontoellv1,pontoellv2)
                        if math.isnan(res[0]):
                            plt.plot(output,output2,output1,output2)
                            print('')
                            print('ATENÇÃO! Foi observado a presença de instabilidade, porém não foi possível realizar o cálculo do ELLV')
                            print('Pontos da fração molar líquida de '+molecula1+ ' em que se calculou instabilidade:')
                            print(output3)
                            print('')
                    except:
                        plt.plot(output,output2,output1,output2)
                        print('')
                        print('ATENÇÃO! Foi observado a presença de instabilidade, porém não foi possível realizar o cálculo do ELLV')
                        print('Pontos da fração molar líquida de '+molecula1+ ' em que se calculou instabilidade:')
                        print(output3)
                        print('')
                Tg=round(T-273.15,4)
                plt.ylabel('P/bar')
                plt.xlabel('x1,y1 '+molecula1 +'/'+molecula2 +' a ' + str(Tg) + '°C')
                if len(output3) == 0:  
                    if len(output2) > 1:
                        plt.plot(output,output2,output1,output2)
                        plt.show()
                    else:
                        print('')
                        print('ERRO! Não foi possível gerar o gráfico, os cálculos BOL-P não convergiram')
                        print('')

    if grafico == '2':
        P = float(input("Qual a Pressão do sistema (em bar) ? "))
        molecula1,molecula2 = inputmolec()
        c.execute("SELECT * FROM stuffToPlot WHERE molecula = '" + molecula1 + "' OR molecula = '" + molecula2 + "'")
        for linha in c.fetchall():
            temp1 = (((linha[2])/(linha[1]-math.log(P*100)))-linha[3])
            if (linha[0] == molecula1):
                T1sat = temp1
                ω1  = linha[4]
                Tc1 = linha[5]
                Pc1 = linha[6]
            elif(linha[0] == molecula2):
                T2sat = temp1
                ω2  = linha[4]
                Tc2 = linha[5]
                Pc2 = linha[6]
        def leitura():
            global P
            output = []
            output1 = []
            output2 = []
            output3 = []
            output4 = []
            output_new = []
            output1_new = []
            output2_new = []
            output5_new = []
            output6_new = []
            output7_new = [] 
            
            T = T2sat
            y1 = 0
            Tkelv = T+273.15
            tol = 1e-3
            for x1 in np.linspace(0,1,num=100):
                y1,y2,Tkelv,IT = BolTy(EdE,x1,y1,Tkelv,P)
                Tcorr = Tkelv-273.15
                dfug = calcest(EdE,x1,y1,Tkelv,P)
                Zl,Zv = calcz(EdE,x1,y1,Tkelv,P)
                if dfug > 0 and abs(Zv-Zl)>tol and IT<99:
                        output.append(x1)
                        output1.append(y1)
                        output2.append(Tcorr) 
                if dfug < 0:
                    output3.append(x1)
                    output4.append(Tcorr)
            if len(output3) > 1:
                try:
                    x1a = output3[0]/2
                    x1b = (output3[-1]+1)/2
                    yellv = (x1a+x1b)/2
                    Tellv = 273.15+(output4[0]+output4[-1])/2
                    res,IT=ELLVT(EdE,x1a,x1b,yellv,Tellv,P)
                    print('')
                    print('ATENÇÃO! a seguinte faixa de fração da fase líquida de '+molecula1+' apresentou instabilidade: ',res[0],'-',res[1])
                    print('')
                    y1 = 0
                    T = T2sat+273.15
                    for x1 in np.linspace(0,float(res[0]),num=50):
                        y1,y2,T,IT = BolTy(EdE,x1,y1,T,P)
                        Zl,Zv = calcz(EdE,x1,y1,T,P)
                        if abs(Zv-Zl)>tol and IT<99:
                            output_new.append(x1)
                            output1_new.append(y1)
                            output2_new.append(T-273.15)
                    
                    x1 = float(res[1])
                    T = (T2sat + (T1sat - T2sat)*x1)+273.15
                    y1 = output1_new[-1]
                    for x1 in np.linspace(float(res[1]),1,num=50):
                        y1,y2,T,IT = BolTy(EdE,x1,y1,T,P)
                        Zl,Zv = calcz(EdE,x1,y1,T,P)
                        if abs(Zv-Zl)>tol and IT<99:
                            output5_new.append(x1)
                            output6_new.append(y1)
                            output7_new.append(T-273.15)
                    plt.plot(output_new,output2_new,output1_new,output2_new)
                    plt.plot(output5_new,output7_new,output6_new,output7_new)
                    pontoellv1 = [res[0],res[1]]
                    pontoellv2 = [300*res[3]-273.15,300*res[3]-273.15]
                    plt.plot(pontoellv1,pontoellv2)
                    if math.isnan(res[0]):
                        plt.plot(output,output2,output1,output2)
                        print('')
                        print('ATENÇÃO! Foi observado a presença de instabilidade, porém não foi possível realizar o cálculo do ELLV')
                        print('Pontos da fração molar líquida de '+molecula1+ ' em que se calculou instabilidade:')
                        print(output3)
                        print('')
                except:
                    plt.plot(output,output2,output1,output2)
                    print('')
                    print('ATENÇÃO! Foi observado a presença de instabilidade, porém não foi possível realizar o cálculo do ELLV')
                    print('Pontos da fração molar líquida de '+molecula1+ ' em que se calculou instabilidade:')
                    print(output3)
                    print('')
            Pg=round(P,4)    
            plt.ylabel('T/°C')
            plt.xlabel('x1,y1 '+molecula1 +'/'+molecula2 +' a ' + str(Pg) + 'bar')
            if len(output3) == 0:  
                    if len(output2) > 1:
                        plt.plot(output,output2,output1,output2)
                        plt.show()
                    else:
                        print('')
                        print('ERRO! Não foi possível gerar o gráfico, o cálculos BOL-T não convergiram')
                        print('')
                        
    print('')
    print('Qual Equação de Estado você quer utilizar?')
    print('1- Van Der Waals')
    print('2- Redlich-Kwong')
    print('3- Soave-Redlich-Kwong')
    print('4- Peng-Robinson')
    print('')
    EdE = input()
    print('')
    print('Qual o valor do parâmetro de interação binária (Kij) você deseja inputar para a mistura '+molecula1+'/'+molecula2+' ?')
    Kij = float(input())
    print('')    
    leitura()
    c.close()
    conn.close()
